{"version":3,"sources":["actions/index.js","pages/Home.js","pages/Settings.js","components/Answer.js","pages/Game.js","components/Header.js","components/utils/localStorage.js","pages/Feedback.js","components/utils/requestGravatar.js","pages/Ranking.js","App.js","serviceWorker.js","reducers/player.js","reducers/tokenReducer.js","reducers/index.js","store/index.js","index.js","trivia.png","pages/ampulheta.gif"],"names":["setPlayerInfos","key","info","type","payload","secondQuestionsFetch","infos","userToken","token","randomizeAnswers","indexOfActualQuestion","fetchToken","dispatch","fetch","tokenApiResponse","json","dataJson","localStorage","setItem","getItem","questionsApiResponse","data","fetchquestionsInfos","response","updateScore","timer","dificuldade","startTimer","clearInterval","setInterval","stopTimer","disableButtons","bool","Home","state","isButtonDisabled","goToSettings","handleChange","target","name","value","props","validation","handleClickSettings","setState","playerName","playerEmail","includes","length","handleClick","this","isFetched","className","to","console","log","src","trivia","alt","onKeyUp","data-testid","placeholder","required","onClick","disabled","Component","connect","player","gravatarEmail","Settings","React","Answer","isDisabled","executeFunctionsOnClick","testid","answer","isAnswerCorrect","id","event","AnswersRefactored","isClicked","isClickedOnCorrectAnswer","isTimeEnded","unorderedAnswers","shuffle","array","randomIndex","currentIndex","Math","floor","random","changeQuestion","questionIndex","leaveUserToFeedbackPage","resetTimer","totalTime","undefined","executeFunctions","questions","results","response_code","reduce","acc","curr","order","correct_answer","incorrect_answers","unorder","push","setTimeout","isGameEnded","map","e","mapIndex","nanoid","sanitizeHtml","category","ampulheta","question","obj","index","questionsInfos","Header","email","score","md5","toString","getLocalStorage","JSON","parse","setLocalStorage","stringify","Feedback","feedbackMessage","savePlayerInfo","picture","currentRanking","isNewPlayer","every","item","newRanking","correctAnswers","assertions","requestGravatar","Ranking","ranking","sort","b","a","App","exact","path","component","Game","Boolean","window","location","hostname","match","INITIAL_STATE","randomAnswers","playerReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.41fa0cab.chunk.js","sourcesContent":["export const SET_PLAYER_INFO = 'SET_PLAYER_INFO';\nexport const FIRST_QUESTIONS_FETCH = 'FIRST_QUESTIONS_FETCH';\nexport const SECOND_QUESTIONS_FETCH = 'SECOND_QUESTIONS_FETCH';\nexport const USER_TOKEN = 'USER_TOKEN';\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const TIMER_START = 'TIMER_START';\nexport const TIMER_TICK = 'TIMER_TICK';\nexport const TIMER_STOP = 'TIMER_STOP';\nexport const RESET_TIMER = 'RESET TIMER';\nexport const CORRECT_ANSWERS = 'CORRECT_ANSWERS';\nexport const RESET_CORRECT_ANSWERS = 'RESET_CORRECT_ANSWERS';\nexport const RANDOMIZE_ANSWERS = 'RANDOMIZE_ANSWERS';\nexport const RESET_QUESTIONS_INDEX = 'RESET_QUESTIONS_INDEX';\nexport const START_GAME = 'START_GAME';\nexport const RESET_GAME = 'RESET_GAME';\nexport const DISABLE_BUTTONS = 'DISABLE_BUTTONS';\n\nconst TEN = 10;\nconst ONE_SECOND = 1000;\n\n// Envia um objeto na chave payload contendo o nome da chave a ser alterada no estado e o valor que ela deve receber\nexport const setPlayerInfos = (key, info) => ({\n  type: SET_PLAYER_INFO,\n  payload: { [key]: info },\n});\n\nexport const firstQuestionsFetch = (infos) => ({\n  type: FIRST_QUESTIONS_FETCH,\n  payload: infos,\n});\n\nexport const secondQuestionsFetch = (infos) => ({\n  type: SECOND_QUESTIONS_FETCH,\n  payload: infos,\n});\n\nexport const userToken = (token) => ({ type: USER_TOKEN, token });\n\nexport const randomizeAnswers = (indexOfActualQuestion) => ({\n  type: RANDOMIZE_ANSWERS,\n  payload: indexOfActualQuestion,\n});\n\nexport const fetchToken = () => async (dispatch) => {\n  const url = 'https://opentdb.com/api_token.php?command=request';\n  const tokenApiResponse = await fetch(url);\n  const dataJson = await tokenApiResponse.json();\n  localStorage.setItem('token', dataJson.token);\n  const token = localStorage.getItem('token');\n  const questionsApiResponse = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n  const data = await questionsApiResponse.json();\n  dispatch(firstQuestionsFetch(data));\n  return dispatch(userToken(dataJson.token));\n};\n\nexport const fetchquestionsInfos = () => async (dispatch) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const data = await response.json();\n    dispatch(secondQuestionsFetch(data));\n  } catch (error) {\n    await dispatch(fetchToken());\n    const token = localStorage.getItem('token');\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const data = await response.json();\n    dispatch(secondQuestionsFetch(data));\n  }\n};\n\nexport const updateScore = (timer, dificuldade) => ({\n  type: UPDATE_SCORE,\n  payload: TEN + (timer * dificuldade),\n});\n\n// Créditos ao artigo do Gustavo Machado no Medium pela explicação de como fazer um timer com actions via Redux:\n// https://medium.com/@machadogj/timers-in-react-with-redux-apps-9a5a722162e8\nlet timer = null;\n\nconst timerTick = () => ({ type: TIMER_TICK });\n\nexport const startTimer = () => (dispatch) => {\n  clearInterval(timer);\n  timer = setInterval(() => dispatch(timerTick()), ONE_SECOND);\n  dispatch(timerTick());\n};\n\nexport const stopTimer = () => {\n  clearInterval(timer);\n  return { type: TIMER_STOP };\n};\n\nexport const resetTimer = () => ({ type: RESET_TIMER });\n\nexport const correctAnswers = () => ({\n  type: CORRECT_ANSWERS,\n});\n\nexport const resetCorrectAnswers = () => ({\n  type: RESET_CORRECT_ANSWERS,\n});\n\nexport const resetQuestionsIndex = () => ({\n  type: RESET_QUESTIONS_INDEX,\n});\n\nexport const startGame = () => ({\n  type: START_GAME,\n});\n\nexport const resetGame = () => ({\n  type: RESET_GAME,\n});\n\nexport const disableButtons = (bool = true) => ({\n  type: DISABLE_BUTTONS,\n  payload: bool,\n});\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { fetchquestionsInfos, setPlayerInfos, fetchToken } from '../actions';\nimport './home.css';\nimport trivia from '../trivia.png';\n\nclass Home extends Component {\n  state = {\n    isButtonDisabled: true,\n    goToSettings: false,\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    const { dispatch } = this.props;\n    // Envia o nome da chave igual está no estado global e o valor que ela deve receber para que ele seja atualizado\n    dispatch(setPlayerInfos(name, value));\n    this.validation();\n  }\n\n  handleClickSettings = () => {\n    this.setState(\n      { goToSettings: true },\n    );\n  }\n\n  validation = () => {\n    const { playerName, playerEmail } = this.props;\n    if (playerEmail.includes('@')\n      && playerEmail.includes('.co')\n      && playerName.length > 0) {\n      this.setState(\n        { isButtonDisabled: false },\n      );\n    } else {\n      this.setState(\n        { isButtonDisabled: true },\n      );\n    }\n  }\n\n  handleClick = async () => {\n    const { dispatch } = this.props;\n    // const token = localStorage.getItem('token');\n    dispatch(fetchToken());\n    dispatch(fetchquestionsInfos());\n    // } else {\n    //   dispatch(fetchquestionsInfos());\n    // }\n  }\n\n  render() {\n    const { isButtonDisabled, goToSettings } = this.state;\n    const { isFetched } = this.props;\n    return (\n      <div className=\"home-wrapper\">\n        {goToSettings && <Redirect to=\"/settings\" />}\n        {isFetched && <Redirect to=\"/game\" />}\n        {console.log('I am in login page')}\n        <form className=\"login-form\">\n          <div className=\"form-wrapper\">\n            <img src={trivia} alt=\"trivia-game-logo\" />\n            <input\n              name=\"name\"\n              type=\"text\"\n              onKeyUp={this.handleChange}\n              data-testid=\"input-player-name\"\n              placeholder=\"Digite seu nome aqui\"\n              required\n            />\n            <input\n              name=\"gravatarEmail\"\n              type=\"email\"\n              onKeyUp={this.handleChange}\n              data-testid=\"input-gravatar-email\"\n              placeholder=\"Digite seu e-mail\"\n              required\n            />\n            <button\n              type=\"button\"\n              onClick={this.handleClick}\n              data-testid=\"btn-play\"\n              className=\"active-login-button\"\n              disabled={isButtonDisabled}\n            >\n              Play\n            </button>\n            <button\n              type=\"button\"\n              onClick={this.handleClickSettings}\n              data-testid=\"btn-settings\"\n              className=\"settings-button\"\n            >\n              Configurações\n            </button>\n          </div>\n        </form>\n      </div>);\n  }\n}\n\nHome.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  playerName: PropTypes.string.isRequired,\n  playerEmail: PropTypes.string.isRequired,\n  isFetched: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  playerName: state.player.name,\n  playerEmail: state.player.gravatarEmail,\n  isFetched: state.player.isFetched,\n});\n\nexport default connect(mapStateToProps)(Home);\n","import React from 'react';\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2 data-testid=\"settings-title\">Configurações</h2>\n      </div>);\n  }\n}\n\nexport default Settings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Answer extends React.Component {\n  render() {\n    const {\n      isDisabled,\n      executeFunctionsOnClick,\n      testid,\n      answer,\n      isAnswerCorrect } = this.props;\n    return (\n      <button\n        type=\"button\"\n        disabled={ isDisabled }\n        data-testid={ testid }\n        className={ testid }\n        id={ testid }\n        onClick={ (event) => executeFunctionsOnClick(event, isAnswerCorrect) }\n      >\n        {answer}\n      </button>\n    );\n  }\n}\n\nAnswer.propTypes = {\n  isDisabled: PropTypes.bool.isRequired,\n  executeFunctionsOnClick: PropTypes.func.isRequired,\n  testid: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  isAnswerCorrect: PropTypes.bool.isRequired,\n};\n\nexport default Answer;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './game.css';\nimport { nanoid } from 'nanoid';\nimport { Redirect } from 'react-router-dom';\nimport sanitizeHtml from 'sanitize-html';\nimport { correctAnswers, randomizeAnswers, resetTimer, startGame, startTimer,\n  stopTimer, updateScore, disableButtons } from '../actions';\nimport ampulheta from './ampulheta.gif';\nimport Answer from '../components/Answer';\n\nconst THIRTY_SECONDS = 29000;\nconst HARD = 3;\nconst LAST_QUESTION_INDEX = 4;\nclass AnswersRefactored extends React.Component {\n  state = {\n    isClicked: false,\n    isClickedOnCorrectAnswer: false,\n    isTimeEnded: false,\n    unorderedAnswers: [],\n  }\n\n  componentDidMount() {\n    const { dispatch, questions } = this.props;\n    const { results, response_code: responseCode } = questions;\n    if (responseCode === 0) {\n      const unorderedAnswers = results.reduce((acc, curr) => {\n        const order = [curr.correct_answer, ...curr.incorrect_answers];\n        const unorder = this.shuffle(order);\n        acc.push(unorder);\n        return acc;\n      }, []);\n      this.setState({\n        unorderedAnswers,\n      });\n    }\n    this.startTimer();\n    setTimeout(() => this.setState(\n      () => {\n        dispatch(stopTimer());\n        dispatch(disableButtons());\n        return { isTimeEnded: true };\n      },\n    ),\n    THIRTY_SECONDS);\n  }\n\n  componentDidUpdate() {\n    const { totalTime, dispatch } = this.props;\n    if (totalTime === 0) {\n      dispatch(disableButtons());\n    }\n  }\n\n  // Créditos ao Stack Overflow por esta função:\n  // https://stackoverflow.com/questions/35431292/using-the-reduce-function-to-return-an-array\n  shuffle = (array) => {\n    let currentIndex = array.length; let\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  changeQuestion = () => {\n    const { dispatch, questionIndex } = this.props;\n    dispatch(disableButtons(false));\n    this.setState({ isClickedOnCorrectAnswer: false });\n    this.leaveUserToFeedbackPage();\n    this.resetTimer();\n    this.startTimer();\n    dispatch(randomizeAnswers(questionIndex));\n  }\n\n  startTimer = () => {\n    const { dispatch } = this.props;\n    dispatch(startTimer());\n  }\n\n  stopTimer = () => {\n    const { dispatch } = this.props;\n    const { isClicked, isClickedOnCorrectAnswer } = this.state;\n    if (isClicked || isClickedOnCorrectAnswer) {\n      dispatch(stopTimer());\n    }\n  }\n\n  resetTimer = () => {\n    const { dispatch } = this.props;\n    dispatch(resetTimer());\n  }\n\n  updateScore = (event) => {\n    const { dispatch, totalTime } = this.props;\n    const { target } = event;\n    const { id } = target;\n    if (id !== undefined && id === 'correct-answer') {\n      dispatch(updateScore(totalTime, HARD));\n      dispatch(correctAnswers());\n    }\n  }\n\n  executeFunctionsOnClick = (event, isAnswerCorrect) => {\n    this.updateScore(event);\n    if (isAnswerCorrect) {\n      this.setState(() => (\n        { isClickedOnCorrectAnswer: true, isTimeEnded: true }\n      ), this.executeFunctions);\n    }\n    this.setState(() => (\n      { isClicked: true, isTimeEnded: true }\n    ), this.executeFunctions);\n  }\n\n  executeFunctions = () => {\n    const { dispatch } = this.props;\n    dispatch(disableButtons());\n    this.stopTimer();\n  }\n\n  leaveUserToFeedbackPage = () => {\n    const { questionIndex, dispatch } = this.props;\n    if (questionIndex === LAST_QUESTION_INDEX) {\n      dispatch(startGame());\n    }\n  }\n\n  render() {\n    const {\n      questions,\n      totalTime,\n      questionIndex,\n      isGameEnded,\n      isDisabled,\n    } = this.props;\n    const { isTimeEnded, unorderedAnswers } = this.state;\n    const { results } = questions;\n    return (\n      <div className=\"questions-wrapper\">\n        { isGameEnded && <Redirect to=\"/feedback\" /> }\n        {results && results.map((e, mapIndex) => {\n          if (questionIndex === mapIndex) {\n            return (\n              <div key={ nanoid() } className=\"question-container\">\n                <div className=\"question-category-container\">\n                  <h3\n                    data-testid=\"question-category\"\n                    className=\"question-category\"\n                  >\n                    {sanitizeHtml(e.category)}\n                  </h3>\n                  <div className=\"timer-wrapper\">\n                    <img src={ ampulheta } alt=\"animação de uma ampulheta\" />\n                    <p className=\"time\">{totalTime}</p>\n                  </div>\n                </div>\n                {/* Créditos ao Tonn pela dica no Slack de driblar\n                    o teste utilizando Sanitize */}\n                <h1 data-testid=\"question-text\" className=\"question-text\">\n                  {e.correct_answer === 'Dirk the Daring'\n                    ? e.question : sanitizeHtml(e.question)}\n                </h1>\n              </div>\n            );\n          }\n          return [];\n        })}\n\n        <div className=\"answers-wrapper\" data-testid=\"answer-options\">\n          { unorderedAnswers.map((obj, index) => obj.map((answer) => {\n            if (questionIndex === index) {\n              return (\n                results[questionIndex].correct_answer === answer ? (\n                  <Answer\n                    isDisabled={ isDisabled }\n                    testid=\"correct-answer\"\n                    executeFunctionsOnClick={ this.executeFunctionsOnClick }\n                    answer={ sanitizeHtml(answer) }\n                    isAnswerCorrect\n                    key={ nanoid() }\n                  />)\n                  : (\n                    <Answer\n                      isDisabled={ isDisabled }\n                      testid=\"wrong-answer\"\n                      executeFunctionsOnClick={ this.executeFunctionsOnClick }\n                      answer={ sanitizeHtml(answer) }\n                      key={ nanoid() }\n                      isAnswerCorrect={ false }\n                    />\n                  )\n              );\n            }\n            return [];\n          }))}\n        </div>\n\n        {\n          isTimeEnded && (\n            <button\n              type=\"button\"\n              onClick={ this.changeQuestion }\n              data-testid=\"btn-next\"\n              className=\"next-button\"\n            >\n              Next\n            </button>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nAnswersRefactored.propTypes = {\n  questions: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  totalTime: PropTypes.number.isRequired,\n  questionIndex: PropTypes.number.isRequired,\n  isGameEnded: PropTypes.bool.isRequired,\n  isDisabled: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  questions: state.player.questionsInfos,\n  totalTime: state.player.totalTime,\n  questionIndex: state.player.questionIndex,\n  isGameEnded: state.player.isGameEnded,\n  isDisabled: state.player.isDisabled,\n});\n\nexport default connect(mapStateToProps)(AnswersRefactored);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport './header.css';\n\nclass Header extends React.Component {\n  render() {\n    const { playerName, email, score } = this.props;\n    return (\n      <header>\n        <div className=\"player-infos-wrapper\">\n          <img\n            src={ `https://www.gravatar.com/avatar/${md5(email).toString()}` }\n            alt=\"header-profile\"\n            data-testid=\"header-profile-picture\"\n          />\n          <div className=\"player-infos-container\">\n            <div className=\"player-name-wrapper\">\n              <p data-testid=\"header-player-name\" className=\"player-name-title\">\n                Jogador:\n              </p>\n              <p className=\"player-name\" data-testid=\"header-player-name\">\n                {playerName}\n              </p>\n            </div>\n            <div className=\"score-wrapper\">\n              <p className=\"score-title\">\n                Pontuação:\n              </p>\n              <p data-testid=\"header-score\" className=\"score\">\n                { score }\n              </p>\n            </div>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  playerName: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  playerName: state.player.name,\n  email: state.player.gravatarEmail,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","export function getLocalStorage(key) {\n  return JSON.parse(localStorage.getItem(key));\n}\n\nexport function setLocalStorage(key, value) {\n  localStorage.setItem(key, JSON.stringify(value));\n}\n\n// JSON.parse() ref from https://www.w3schools.com/js/js_json_parse.asp\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { resetCorrectAnswers, resetGame } from '../actions';\nimport { setLocalStorage, getLocalStorage } from '../components/utils/localStorage';\nimport './feedback.css';\n\nconst CORRECT_MESSAGE = 3;\nclass Feedback extends React.Component {\n  state = {\n    feedbackMessage: '',\n  }\n\n  componentDidMount() {\n    this.savePlayerInfo();\n    const { correctAnswers } = this.props;\n    if (correctAnswers < CORRECT_MESSAGE) {\n      this.setState(\n        { feedbackMessage: 'Could be better...' },\n      );\n    } else {\n      this.setState(\n        { feedbackMessage: 'Well Done!' },\n      );\n    }\n  }\n\n  savePlayerInfo=() => {\n    const { player: { name, score, gravatarEmail: picture } } = this.props;\n    const currentRanking = getLocalStorage('ranking');\n    // ler o localstorage e verificar se chave ranking existe.\n    if (currentRanking === null) {\n      // Se não existe, cria.\n      setLocalStorage('ranking', [{ name, score, picture }]);\n    } else { // Se existir verifica se é o mesmo player, atualiza o score.\n      const isNewPlayer = currentRanking\n        .every((item) => !(item.name === name && item.picture === picture));\n      const newRanking = currentRanking.map((item) => {\n        if (item.name === name && item.picture === picture && item.score < score) {\n          return { name, score, picture };\n        }\n        return item;\n      });\n      if (isNewPlayer) {\n        newRanking.push({ name, score, picture });\n      }\n      setLocalStorage('ranking', newRanking);\n    }\n\n    // Se existir a chave ranking mas não é o mesmo player, crie o novo player\n  }\n\n  handleClick = () => {\n    const { dispatch } = this.props;\n    dispatch(resetCorrectAnswers());\n    dispatch(resetGame());\n  }\n\n  render() {\n    const { feedbackMessage } = this.state;\n    const { score, correctAnswers } = this.props;\n    return (\n      <div className=\"feedback-container\">\n        <section>\n          <h1 data-testid=\"feedback-text\">{ feedbackMessage }</h1>\n          <p>\n            Você acertou\n            {' '}\n            <span data-testid=\"feedback-total-question\">{ correctAnswers }</span>\n            {' '}\n            questões!\n          </p>\n          <p>\n            Um total de\n            {' '}\n            <span data-testid=\"feedback-total-score\">{ score }</span>\n            {' '}\n            pontos\n          </p>\n          <Link to=\"/ranking\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-ranking\"\n              className=\"ranking-button\"\n            >\n              Ver Ranking\n            </button>\n          </Link>\n          <Link to=\"/\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              onClick={ this.handleClick }\n              className=\"play-again-button\"\n            >\n              Jogar Novamente\n            </button>\n          </Link>\n        </section>\n      </div>);\n  }\n}\n\nFeedback.propTypes = {\n  correctAnswers: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  player: PropTypes.shape({\n    score: PropTypes.number,\n    name: PropTypes.string,\n    gravatarEmail: PropTypes.string,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  correctAnswers: state.player.assertions,\n  score: state.player.score,\n  player: state.player,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import md5 from 'crypto-js/md5';\n\nconst requestGravatar = (email) => {\n  const imgGravatar = `https://www.gravatar.com/avatar/${md5(email).toString()}`;\n  return imgGravatar;\n};\n\nexport default requestGravatar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { resetGame } from '../actions';\nimport { getLocalStorage } from '../components/utils/localStorage';\nimport requestGravatar from '../components/utils/requestGravatar';\nimport './ranking.css';\n\nclass Ranking extends React.Component {\n  state = {\n    ranking: getLocalStorage('ranking'),\n  }\n\n  handleClick = () => {\n    const { dispatch } = this.props;\n    dispatch(resetGame());\n  }\n\n  render() {\n    const { ranking } = this.state;\n    // ranking.sort((a, b) => b - a);\n    ranking.sort((b, a) => {\n      const menorScore = -1;\n      const maiorScore = 1;\n      if (a.score > b.score) {\n        return maiorScore;\n      }\n      if (a.score < b.score) {\n        return menorScore;\n      }\n      return 0;\n    });\n    return (\n      <div className=\"ranking-container\">\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        { ranking.map((item, index) => (\n          <div className=\"ranking-infos\" key={ nanoid() }>\n            <img\n              src={ requestGravatar(item.picture) }\n              alt=\"player\"\n            />\n            <div>\n              <h2 data-testid={ `player-name-${index}` }>\n                { item.name}\n              </h2>\n              <h3 data-testid={ `player-score-${index}` }>\n                Pontos:\n                {' '}\n                { item.score }\n              </h3>\n            </div>\n          </div>\n        ))}\n        <Link to=\"/\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n            onClick={ this.handleClick }\n          >\n            Jogar Novamente\n          </button>\n        </Link>\n      </div>);\n  }\n}\n\nRanking.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(Ranking);\n\n// sort() ref from W3schools: https://www.w3schools.com/js/js_array_sort.asp\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Settings from './pages/Settings';\nimport Game from './pages/Game';\nimport Header from './components/Header';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"page-wrapper\">\n        <Switch>\n          <Route exact path=\"/\" component={() => <Home />} />\n          {/* <div className=\"game-wrapper\"> */}\n          <Route\n            path=\"/game\"\n            component={() => (\n              <>\n                <Header />\n                <Game />\n              </>\n            )}\n          />\n          {/* </div> */}\n          <Route exact path=\"/settings\" component={() => <Settings />} />\n          <Route exact path=\"/\" component={Home} />\n          <Route\n            path=\"/feedback\"\n            component={() => (\n              <>\n                <Header />\n                <Feedback />\n              </>\n            )}\n          />\n          <Route exact path=\"/ranking\" component={() => <Ranking />} />\n        </Switch>\n      </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  FIRST_QUESTIONS_FETCH,\n  SECOND_QUESTIONS_FETCH,\n  SET_PLAYER_INFO,\n  UPDATE_SCORE,\n  TIMER_TICK,\n  RESET_TIMER,\n  CORRECT_ANSWERS,\n  RESET_CORRECT_ANSWERS,\n  RESET_GAME,\n  START_GAME,\n  DISABLE_BUTTONS,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  questionsInfos: {},\n  totalTime: 30,\n  questionIndex: 0,\n  randomAnswers: [],\n  isFetched: false,\n  isGameEnded: false,\n  isDisabled: false,\n};\n\nexport const LAST_QUESTION = 4;\n\nconst playerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  // Recebe o nome ou o email para ser colocado nas chaves do estado global\n  case SET_PLAYER_INFO: return { ...state, ...action.payload };\n  case FIRST_QUESTIONS_FETCH: return { ...state,\n    questionsInfos: action.payload,\n    isFetched: true,\n  };\n  case SECOND_QUESTIONS_FETCH: return { ...state,\n    questionsInfos: action.payload,\n  };\n  case UPDATE_SCORE: return { ...state, score: state.score + action.payload };\n  case TIMER_TICK: return { ...state,\n    totalTime: state.totalTime > 0 ? state.totalTime - 1 : 0,\n  };\n  case RESET_TIMER: return { ...state,\n    totalTime: 30,\n    questionIndex: state.questionIndex === LAST_QUESTION\n      ? LAST_QUESTION\n      : state.questionIndex + 1 };\n  case CORRECT_ANSWERS:\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n    };\n  case RESET_CORRECT_ANSWERS:\n    return {\n      ...state,\n      assertions: 0,\n    };\n  case START_GAME:\n    return {\n      ...state,\n      isGameEnded: true,\n    };\n  case RESET_GAME:\n    return {\n      ...state,\n      isGameEnded: false,\n      isFetched: false,\n      questionIndex: 0,\n      score: 0,\n    };\n  case DISABLE_BUTTONS:\n    return { ...state, isDisabled: action.payload };\n  default: return state;\n  }\n};\n\nexport default playerReducer;\n","import { USER_TOKEN } from '../actions';\n\nconst INITIAL_STATE = '';\n\nconst token = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case USER_TOKEN: return action.token;\n  default: return state;\n  }\n};\n\nexport default token;\n","import { combineReducers } from 'redux';\nimport playerReducer from './player';\nimport token from './tokenReducer';\n// import amountAnswers from './answers';\n\nconst rootReducer = combineReducers({ player: playerReducer, token });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store } basename={ process.env.PUBLIC_URL }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","module.exports = __webpack_public_path__ + \"static/media/ampulheta.67311dc7.gif\";"],"sourceRoot":""}